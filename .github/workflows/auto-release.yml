name: Auto Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  auto-release:
    if: github.event_name == 'workflow_dispatch' || (contains(github.event.head_commit.message, '[release]') || contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:'))
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.21'

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Auto-increment version based on commit message
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="v1.0.0"
          else
            # Extract version numbers
            VERSION_PART=$(echo $LATEST_TAG | sed 's/v//')
            MAJOR=$(echo $VERSION_PART | cut -d. -f1)
            MINOR=$(echo $VERSION_PART | cut -d. -f2)
            PATCH=$(echo $VERSION_PART | cut -d. -f3)
            
            # Increment based on commit message
            if echo "${{ github.event.head_commit.message }}" | grep -q "feat:"; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.version.outputs.VERSION }} -m "Release ${{ steps.version.outputs.VERSION }}"
        git push origin ${{ steps.version.outputs.VERSION }}

    - name: Generate release documentation
      run: |
        cat > RELEASE_TEMPLATE.md << 'EOF'
        ðŸŽ‰ **AWS SSM ${{ steps.version.outputs.VERSION }} is now available!**
        
        This release includes improvements and bug fixes to make AWS Secrets Manager access even easier.
        
        ## ðŸš€ Quick Start
        
        ### Installation Methods
        
        #### Option 1: Direct Download
        Download the binary for your platform from the [releases page](https://github.com/hypolas/aws-ssm-lite/releases/latest).
        
        #### Option 2: One-liner install (Linux/macOS)
        ```bash
        # Linux AMD64
        curl -L https://github.com/hypolas/aws-ssm-lite/releases/latest/download/aws-ssm-linux-amd64 -o aws-ssm && chmod +x aws-ssm && sudo mv aws-ssm /usr/local/bin/
        
        # macOS (Apple Silicon)
        curl -L https://github.com/hypolas/aws-ssm-lite/releases/latest/download/aws-ssm-darwin-arm64 -o aws-ssm && chmod +x aws-ssm && sudo mv aws-ssm /usr/local/bin/
        ```
        
        ### Usage Examples
        ```bash
        # Basic usage
        aws-ssm "my-secret-name"
        
        # With specific region
        aws-ssm "my-secret-name" "us-west-2"
        
        # Use in scripts
        DB_PASSWORD=$(aws-ssm "database-password")
        ```
        
        ## ðŸ“± Supported Platforms
        
        - âœ… Windows (Intel/AMD64, ARM64)
        - âœ… Linux (Intel/AMD64, ARM64)
        - âœ… macOS (Intel, Apple Silicon)
        
        ## ðŸ”§ Requirements
        
        - AWS credentials configured (via AWS CLI, environment variables, or IAM roles)
        - Access to AWS Secrets Manager
        
        ---
        
        For issues or feature requests, please visit our [GitHub repository](https://github.com/hypolas/aws-ssm-lite).
        EOF
        
        echo "RELEASE_TEMPLATE<<EOF" >> $GITHUB_ENV
        cat RELEASE_TEMPLATE.md >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV